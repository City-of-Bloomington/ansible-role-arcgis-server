# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# VersionMaintenance.py
# Created on: 2013-09-12 12:20:18.00000
#   (generated by ArcGIS/ModelBuilder)
# Description: 
# ---------------------------------------------------------------------------


# Set the necessary product code
# mport arceditor

# Import arcpy module
import sys, string, os, arcpy, datetime, psycopg2, smtplib

def sendemail(txtFile):
    smtpServer = "smtp server address"
    fromEmail = "from email"
    toEmail = "to email"
    passWrd = "smtp pasword"
    # Import the email modules we'll need
    from email.message import EmailMessage

    # Open the plain text file whose name is in textfile for reading.
    with open(txtFile) as fp:
        # Create a text/plain message
        msg = EmailMessage()
        msg.set_content(fp.read())

    msg['Subject'] = 'Version Maintenance'
    msg['From'] = fromEmail
    msg['To'] = toEmail

    # Send the message
    s = smtplib.SMTP(smtpServer, 587)
    s.ehlo()
    s.starttls()
    s.login(fromEmail, passWrd)

    s.send_message(msg)
    s.quit()

#Environment variables
#change log location to location that exists in environment..
log_file_name = "/scripts/log/VersionMaintenance"
#location of the sde connection file on disk
sdeFile = "/scripts/connection.sde"
#postgresql connection to db
pgConnection = "host=192.168.200.110 dbname=geodb user=sde password=sde"
#SDE default version 
defaultVersion = "SDE.DEFAULT"
#Edit version Tier
editVersion = "SDE.MasterEdit"
#the database
databaseName = "geodb"
#send the email or not
needsToSendEmail = False

# Get the current date
now = datetime.datetime.now()
date_title = str(now.year) + str(now.month) + str(now.day)
date_time = str(now.year) + "_" + str(now.month) + "_" + str(now.day) + "  " + str(now.hour) + ":" + str(now.minute) + ":" + str(now.second)

log_file_name += "_"+date_title + ".txt"
# Create log file
txtFile = open(log_file_name, "a")
txtFile.write("\n")
txtFile.write("\n")
txtFile.write("\n")
txtFile.write("\n")
txtFile.write("Date: " + date_time + "\n" )


# Local variables:
Reconcile_Versions_Log = ""

# Get a list of versions to pass into the ReconcileVersions tool
versionList = arcpy.ListVersions(sdeFile)

txtFile.write("\n")
txtFile.write("Rec and Post Edit version to Default")
txtFile.write("\n")
# Process: Reconcile and Post MasterEdit to Default
arcpy.ReconcileVersions_management(sdeFile, "ALL_VERSIONS", defaultVersion, editVersion, "LOCK_ACQUIRED", "ABORT_CONFLICTS", "BY_OBJECT", "FAVOR_TARGET_VERSION", "POST", "KEEP_VERSION", Reconcile_Versions_Log)
txtFile.write (arcpy.GetMessages())

txtFile.write("\n")
txtFile.write("Compress DB")
txtFile.write("\n")
# Process: Compress
arcpy.Compress_management(sdeFile)
txtFile.write (arcpy.GetMessages())

txtFile.write("\n")
txtFile.write("Reconcile all the versions")
txtFile.write("\n")
# Process: Reconcile All Versions
arcpy.ReconcileVersions_management(sdeFile, "ALL_VERSIONS", defaultVersion, versionList , "LOCK_ACQUIRED", "ABORT_CONFLICTS", "BY_OBJECT", "FAVOR_TARGET_VERSION", "NO_POST", "KEEP_VERSION", Reconcile_Versions_Log)
txtFile.write (arcpy.GetMessages())

txtFile.write("\n")
txtFile.write("ArcPY POST And Rec Complete")

txtFile.write("\n")
txtFile.write("Connecting to the db directly through pg")

conn = psycopg2.connect(pgConnection)
conn.set_session(autocommit=True)

txtFile.write("\n")
txtFile.write("Analyzing DB")

cur = conn.cursor()
cur.execute("ANALYZE;")
conn.commit()
cur.close()

txtFile.write("\n")
txtFile.write("Vaccum DB")

cur = conn.cursor()
cur.execute("VACUUM ANALYZE;")
conn.commit()
cur.close()


txtFile.write("\n")
txtFile.write("Re index DB")

cur = conn.cursor()
cur.execute("REINDEX DATABASE " + databaseName + ";")
conn.commit()
cur.close()

conn.close()

date_timedone = str(now.year) + "_" + str(now.month) + "_" + str(now.day) + "  " + str(now.hour) + ":" + str(now.minute) + ":" + str(now.second)

txtFile.write("\n")
txtFile.write("Complete " + date_timedone)

txtFile.close()

if needsToSendEmail:
    sendemail(log_file_name)
